package com.example.songplayer.player;import android.app.Notification;import android.app.NotificationChannel;import android.app.NotificationManager;import android.app.PendingIntent;import android.app.Service;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.BitmapFactory;import android.graphics.Color;import android.hardware.Sensor;import android.hardware.SensorEvent;import android.hardware.SensorEventListener;import android.hardware.SensorManager;import android.media.MediaPlayer;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.IBinder;import android.os.Message;import android.os.Messenger;import androidx.annotation.Nullable;import androidx.annotation.RequiresApi;import androidx.core.app.NotificationCompat;import androidx.core.app.NotificationManagerCompat;import androidx.localbroadcastmanager.content.LocalBroadcastManager;import com.example.songplayer.MainActivity;import com.example.songplayer.R;import java.io.IOException;import java.lang.reflect.Array;import java.security.Provider;import java.util.ArrayList;import java.util.List;import java.util.Map;import static android.app.PendingIntent.FLAG_UPDATE_CURRENT;public class MediaPlayerService extends Service implements SensorEventListener {  private MyReceiver myReceiver ;    @Override    public void onCreate() {        SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);        Sensor proximity = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);        sensorManager.registerListener(this,proximity, SensorManager.SENSOR_DELAY_NORMAL);        myReceiver = new MyReceiver();        registerReceiver(myReceiver,new IntentFilter("play/pause"));        registerReceiver(myReceiver,new IntentFilter("next"));        registerReceiver(myReceiver,new IntentFilter("previous"));        System.out.println("onCreate");        super.onCreate();    }    MediaPlayer mp  = new MediaPlayer();    @Nullable    @Override    public IBinder onBind(Intent intent) {        return null;    }    public ArrayList<Map<String,String>> listSongs  ;    public int currentIndex = 0;    int currentPostion  = 0;    @RequiresApi(api = Build.VERSION_CODES.R)    public  void start() {        if(mp.isPlaying()) {            mp.stop();        }        mp.reset();        try {            mp.setDataSource(listSongs.get(currentIndex).get("filePath"));        } catch (IOException e) {            e.printStackTrace();        }        try {            mp.prepare();        } catch (IOException e) {            e.printStackTrace();        }        mp.start();    }    public void stop() {    }    Intent notificationIntent;    PendingIntent pendingIntent;    NotificationManager notificationManager;    @RequiresApi(api = Build.VERSION_CODES.R)    @Override    public int onStartCommand(Intent startIntent, int flags, int startId) {       System.out.println(currentIndex);       System.out.println(startIntent.getAction());       if(startIntent.getAction().equals("pause")) {           pause();           return  START_STICKY;       }else if(startIntent.getAction().equals("resume")) {           resume();           return START_STICKY;       }        listSongs = (ArrayList<Map<String, String>>) startIntent.getSerializableExtra("list");        currentIndex   = startIntent.getIntExtra("index",0);         notificationIntent = new Intent(this, MainActivity.class);       pendingIntent = PendingIntent.getActivity(this, 0,                notificationIntent, 0);     notificationManager =(NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);        String channelId = "my_channel_id";        CharSequence channelName = "My Channel";        PendingIntent pPPendingIntent =                PendingIntent.getBroadcast(this, 0, new Intent("play/pause"),                        FLAG_UPDATE_CURRENT);        PendingIntent pPPendingIntent2 =                PendingIntent.getBroadcast(this, 1, new Intent("next"),                        FLAG_UPDATE_CURRENT);        PendingIntent pPPendingIntent3 =                PendingIntent.getBroadcast(this, 2, new Intent("previous"),                        FLAG_UPDATE_CURRENT);        int importance = NotificationManager.IMPORTANCE_HIGH;        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { NotificationChannel notificationChannel = new                NotificationChannel(channelId, channelName, importance);            notificationManager.createNotificationChannel(notificationChannel);}        start();        createNotification("pause");        return START_STICKY;    }    @Override    public void onDestroy() {       mp.stop();    }    public void resume(){        mp.seekTo(mp.getCurrentPosition());        mp.start();        createNotification("stop");    }    public void pause() {       System.out.println("pause");        if(mp.isPlaying()) {            mp.pause();            createNotification("resume");        }    }    @RequiresApi(api = Build.VERSION_CODES.R)    @Override    public void onSensorChanged(SensorEvent event) {        if(event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {            float x  = event.values[0];           // System.out.println(Math.abs(x));            if(Math.abs(x) > 50) {                if(!mp.isPlaying()) {                    resume();                }            }        }    }    @Override    public void onAccuracyChanged(Sensor sensor, int accuracy) {    }    public class MyReceiver extends BroadcastReceiver {        @RequiresApi(api = Build.VERSION_CODES.R)        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();System.out.println("rana hna");System.out.println(intent.getAction());System.out.println(currentIndex);System.out.println(listSongs);            if (action.equals("play/pause")) {                if(mp.isPlaying()) {                    System.out.println("pause");                    pause();                }                else {                   resume();                }            }else if(action.equals("next")) {                if(currentIndex == listSongs.size() -1) {                    return;                }                mp.reset();                currentIndex++;                start();                createNotification("pause");            }else {                if(currentIndex == 0) {                    return ;                }                currentIndex -- ;                mp.reset();                start();                createNotification("pause");            }        }    }    public void createNotification(String s) {       int progressMax = 100;        String channelId = "my_channel_id";        CharSequence channelName = "My Channel";        PendingIntent pPPendingIntent =                PendingIntent.getBroadcast(this, 0, new Intent("play/pause"),                        FLAG_UPDATE_CURRENT);        PendingIntent pPPendingIntent2 =                PendingIntent.getBroadcast(this, 1, new Intent("next"),                        FLAG_UPDATE_CURRENT);        PendingIntent pPPendingIntent3 =                PendingIntent.getBroadcast(this, 2, new Intent("previous"),                        FLAG_UPDATE_CURRENT);        int importance = NotificationManager.IMPORTANCE_HIGH;        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { NotificationChannel notificationChannel = new                NotificationChannel(channelId, channelName, importance);            notificationManager.createNotificationChannel(notificationChannel);}        NotificationCompat.Builder notification =                new NotificationCompat.Builder(this, channelId)                        .setContentTitle(listSongs.get(currentIndex).get("title"))                        .setContentText(listSongs.get(currentIndex).get("desc"))                        .addAction(R.drawable.pause, "play/pause", pPPendingIntent)                        .addAction(R.drawable.pause, "next", pPPendingIntent2)                        .addAction(R.drawable.play, "previous", pPPendingIntent3).                        setSmallIcon(R.drawable.corner)                        .setProgress(mp.getDuration(),0,false)                        .setOngoing(true)                        .setOnlyAlertOnce(false)                        .setContentIntent(pendingIntent);        startForeground(110, notification.build());        new Thread(new Runnable() {            @Override            public void run() {                while (mp.isPlaying()){                    System.out.println(mp.getDuration());                    System.out.println(mp.getCurrentPosition());                    notification.setProgress(mp.getDuration(),mp.getCurrentPosition(),false).setOngoing(true);                    startForeground(110, notification.build());                    System.out.println(mp.getDuration()+ "Duration");                    System.out.println(mp.getCurrentPosition()+ "Position");                }            }        }).start();    }}